// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: conf/v1/kratos_conf_data.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 数据
type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      *Data_Database         `protobuf:"bytes,1,opt,name=database,proto3,oneof" json:"database,omitempty"`                                 // 数据库DSN
	Redis         *Data_Redis            `protobuf:"bytes,10,opt,name=redis,proto3,oneof" json:"redis,omitempty"`                                      // Redis
	Mongodb       *Data_MongoDB          `protobuf:"bytes,11,opt,name=mongodb,proto3,oneof" json:"mongodb,omitempty"`                                  // MongoDB数据库
	ElasticSearch *Data_ElasticSearch    `protobuf:"bytes,12,opt,name=elastic_search,json=elasticSearch,proto3,oneof" json:"elastic_search,omitempty"` // ElasticSearch数据库
	Cassandra     *Data_Cassandra        `protobuf:"bytes,13,opt,name=cassandra,proto3,oneof" json:"cassandra,omitempty"`                              // Cassandra数据库
	Clickhouse    *Data_ClickHouse       `protobuf:"bytes,20,opt,name=clickhouse,proto3,oneof" json:"clickhouse,omitempty"`                            // ClickHouse数据库
	Influxdb      *Data_InfluxDB         `protobuf:"bytes,21,opt,name=influxdb,proto3,oneof" json:"influxdb,omitempty"`                                // InfluxDB数据库
	Doris         *Data_Doris            `protobuf:"bytes,22,opt,name=doris,proto3,oneof" json:"doris,omitempty"`                                      // Doris数据库
	Kafka         *Data_Kafka            `protobuf:"bytes,30,opt,name=kafka,proto3,oneof" json:"kafka,omitempty"`                                      // Kafka服务
	Rabbitmq      *Data_RabbitMQ         `protobuf:"bytes,31,opt,name=rabbitmq,proto3,oneof" json:"rabbitmq,omitempty"`                                // RabbitMQ服务
	Mqtt          *Data_Mqtt             `protobuf:"bytes,32,opt,name=mqtt,proto3,oneof" json:"mqtt,omitempty"`                                        // MQTT服务
	Activemq      *Data_ActiveMQ         `protobuf:"bytes,33,opt,name=activemq,proto3,oneof" json:"activemq,omitempty"`                                // ActiveMQ
	Nats          *Data_NATS             `protobuf:"bytes,34,opt,name=nats,proto3,oneof" json:"nats,omitempty"`                                        // NATS
	Nsq           *Data_NSQ              `protobuf:"bytes,35,opt,name=nsq,proto3,oneof" json:"nsq,omitempty"`                                          // NATS
	Pulsar        *Data_Pulsar           `protobuf:"bytes,36,opt,name=pulsar,proto3,oneof" json:"pulsar,omitempty"`                                    // Pulsar
	Rocketmq      *Data_RocketMQ         `protobuf:"bytes,38,opt,name=rocketmq,proto3,oneof" json:"rocketmq,omitempty"`                                // RocketMQ
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetDatabase() *Data_Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetMongodb() *Data_MongoDB {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *Data) GetElasticSearch() *Data_ElasticSearch {
	if x != nil {
		return x.ElasticSearch
	}
	return nil
}

func (x *Data) GetCassandra() *Data_Cassandra {
	if x != nil {
		return x.Cassandra
	}
	return nil
}

func (x *Data) GetClickhouse() *Data_ClickHouse {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *Data) GetInfluxdb() *Data_InfluxDB {
	if x != nil {
		return x.Influxdb
	}
	return nil
}

func (x *Data) GetDoris() *Data_Doris {
	if x != nil {
		return x.Doris
	}
	return nil
}

func (x *Data) GetKafka() *Data_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *Data) GetRabbitmq() *Data_RabbitMQ {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Data) GetMqtt() *Data_Mqtt {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *Data) GetActivemq() *Data_ActiveMQ {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *Data) GetNats() *Data_NATS {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *Data) GetNsq() *Data_NSQ {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *Data) GetPulsar() *Data_Pulsar {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *Data) GetRocketmq() *Data_RocketMQ {
	if x != nil {
		return x.Rocketmq
	}
	return nil
}

// 数据库
type Data_Database struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Driver                string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`                                                                     // 驱动名：mysql、postgresql、mongodb、sqlite……
	Source                string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                                                     // 数据源（DSN字符串）
	Migrate               bool                   `protobuf:"varint,10,opt,name=migrate,proto3" json:"migrate,omitempty"`                                                                 // 数据迁移开关
	Debug                 bool                   `protobuf:"varint,11,opt,name=debug,proto3" json:"debug,omitempty"`                                                                     // 调试开关
	EnableTrace           bool                   `protobuf:"varint,12,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`                                      // 链路追踪开关
	EnableMetrics         bool                   `protobuf:"varint,13,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`                                // 性能分析开关
	MaxIdleConnections    *int32                 `protobuf:"varint,20,opt,name=max_idle_connections,json=maxIdleConnections,proto3,oneof" json:"max_idle_connections,omitempty"`         // 连接池最大空闲连接数
	MaxOpenConnections    *int32                 `protobuf:"varint,21,opt,name=max_open_connections,json=maxOpenConnections,proto3,oneof" json:"max_open_connections,omitempty"`         // 连接池最大打开连接数
	ConnectionMaxLifetime *durationpb.Duration   `protobuf:"bytes,22,opt,name=connection_max_lifetime,json=connectionMaxLifetime,proto3,oneof" json:"connection_max_lifetime,omitempty"` // 连接可重用的最大时间长度
	PrometheusPushAddr    *string                `protobuf:"bytes,30,opt,name=prometheus_push_addr,json=prometheusPushAddr,proto3,oneof" json:"prometheus_push_addr,omitempty"`
	PrometheusDbName      *string                `protobuf:"bytes,31,opt,name=prometheus_db_name,json=prometheusDbName,proto3,oneof" json:"prometheus_db_name,omitempty"`
	PrometheusHttpPort    *uint32                `protobuf:"varint,32,opt,name=prometheus_http_port,json=prometheusHttpPort,proto3,oneof" json:"prometheus_http_port,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Data_Database) Reset() {
	*x = Data_Database{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Database) ProtoMessage() {}

func (x *Data_Database) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Database.ProtoReflect.Descriptor instead.
func (*Data_Database) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Data_Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Data_Database) GetMigrate() bool {
	if x != nil {
		return x.Migrate
	}
	return false
}

func (x *Data_Database) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Data_Database) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *Data_Database) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Data_Database) GetMaxIdleConnections() int32 {
	if x != nil && x.MaxIdleConnections != nil {
		return *x.MaxIdleConnections
	}
	return 0
}

func (x *Data_Database) GetMaxOpenConnections() int32 {
	if x != nil && x.MaxOpenConnections != nil {
		return *x.MaxOpenConnections
	}
	return 0
}

func (x *Data_Database) GetConnectionMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return nil
}

func (x *Data_Database) GetPrometheusPushAddr() string {
	if x != nil && x.PrometheusPushAddr != nil {
		return *x.PrometheusPushAddr
	}
	return ""
}

func (x *Data_Database) GetPrometheusDbName() string {
	if x != nil && x.PrometheusDbName != nil {
		return *x.PrometheusDbName
	}
	return ""
}

func (x *Data_Database) GetPrometheusHttpPort() uint32 {
	if x != nil && x.PrometheusHttpPort != nil {
		return *x.PrometheusHttpPort
	}
	return 0
}

// redis
type Data_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                   // 网络
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`                                         // 服务端地址
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                 // 密码
	Db            int32                  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`                                            // 数据库索引
	DialTimeout   *durationpb.Duration   `protobuf:"bytes,5,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`        // 连接超时时间
	ReadTimeout   *durationpb.Duration   `protobuf:"bytes,6,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`        // 读取超时时间
	WriteTimeout  *durationpb.Duration   `protobuf:"bytes,7,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`     // 写入超时时间
	EnableTracing bool                   `protobuf:"varint,8,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"` // 打开链路追踪
	EnableMetrics bool                   `protobuf:"varint,9,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"` // 打开性能度量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Data_Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Data_Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Data_Redis) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

func (x *Data_Redis) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

// MongoDB
type Data_MongoDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_MongoDB) Reset() {
	*x = Data_MongoDB{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_MongoDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_MongoDB) ProtoMessage() {}

func (x *Data_MongoDB) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_MongoDB.ProtoReflect.Descriptor instead.
func (*Data_MongoDB) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Data_MongoDB) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Data_MongoDB) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_MongoDB) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// ClickHouse
type Data_ClickHouse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Address               string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Database              string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Username              string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password              string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Debug                 bool                   `protobuf:"varint,5,opt,name=debug,proto3" json:"debug,omitempty"`
	CompressionMethod     string                 `protobuf:"bytes,6,opt,name=compression_method,json=compressionMethod,proto3" json:"compression_method,omitempty"`
	DialTimeout           *durationpb.Duration   `protobuf:"bytes,7,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	MaxExecutionTime      int32                  `protobuf:"varint,8,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`
	MaxOpenConns          int32                  `protobuf:"varint,9,opt,name=max_open_conns,json=maxOpenConns,proto3" json:"max_open_conns,omitempty"`
	MaxIdleConns          int32                  `protobuf:"varint,10,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty"`
	ConnMaxLifeTime       *durationpb.Duration   `protobuf:"bytes,11,opt,name=conn_max_life_time,json=connMaxLifeTime,proto3" json:"conn_max_life_time,omitempty"`
	BlockBufferSize       int32                  `protobuf:"varint,12,opt,name=block_buffer_size,json=blockBufferSize,proto3" json:"block_buffer_size,omitempty"`
	MaxCompressionBuffer  int32                  `protobuf:"varint,13,opt,name=max_compression_buffer,json=maxCompressionBuffer,proto3" json:"max_compression_buffer,omitempty"`
	ConnOpenStrategy      string                 `protobuf:"bytes,14,opt,name=conn_open_strategy,json=connOpenStrategy,proto3" json:"conn_open_strategy,omitempty"`
	MaxIdleConnections    int32                  `protobuf:"varint,15,opt,name=max_idle_connections,json=maxIdleConnections,proto3" json:"max_idle_connections,omitempty"`         // 连接池最大空闲连接数
	MaxOpenConnections    int32                  `protobuf:"varint,16,opt,name=max_open_connections,json=maxOpenConnections,proto3" json:"max_open_connections,omitempty"`         // 连接池最大打开连接数
	ConnectionMaxLifetime *durationpb.Duration   `protobuf:"bytes,17,opt,name=connection_max_lifetime,json=connectionMaxLifetime,proto3" json:"connection_max_lifetime,omitempty"` // 连接可重用的最大时间长度
	Protocol              string                 `protobuf:"bytes,18,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Tls                   *TLS                   `protobuf:"bytes,19,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Data_ClickHouse) Reset() {
	*x = Data_ClickHouse{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_ClickHouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_ClickHouse) ProtoMessage() {}

func (x *Data_ClickHouse) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_ClickHouse.ProtoReflect.Descriptor instead.
func (*Data_ClickHouse) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Data_ClickHouse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Data_ClickHouse) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Data_ClickHouse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_ClickHouse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_ClickHouse) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Data_ClickHouse) GetCompressionMethod() string {
	if x != nil {
		return x.CompressionMethod
	}
	return ""
}

func (x *Data_ClickHouse) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Data_ClickHouse) GetMaxExecutionTime() int32 {
	if x != nil {
		return x.MaxExecutionTime
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *Data_ClickHouse) GetConnMaxLifeTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return nil
}

func (x *Data_ClickHouse) GetBlockBufferSize() int32 {
	if x != nil {
		return x.BlockBufferSize
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxCompressionBuffer() int32 {
	if x != nil {
		return x.MaxCompressionBuffer
	}
	return 0
}

func (x *Data_ClickHouse) GetConnOpenStrategy() string {
	if x != nil {
		return x.ConnOpenStrategy
	}
	return ""
}

func (x *Data_ClickHouse) GetMaxIdleConnections() int32 {
	if x != nil {
		return x.MaxIdleConnections
	}
	return 0
}

func (x *Data_ClickHouse) GetMaxOpenConnections() int32 {
	if x != nil {
		return x.MaxOpenConnections
	}
	return 0
}

func (x *Data_ClickHouse) GetConnectionMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return nil
}

func (x *Data_ClickHouse) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Data_ClickHouse) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// InfluxDB
type Data_InfluxDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Organization  string                 `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	Bucket        string                 `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_InfluxDB) Reset() {
	*x = Data_InfluxDB{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_InfluxDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_InfluxDB) ProtoMessage() {}

func (x *Data_InfluxDB) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_InfluxDB.ProtoReflect.Descriptor instead.
func (*Data_InfluxDB) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Data_InfluxDB) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Data_InfluxDB) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Data_InfluxDB) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *Data_InfluxDB) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

type Data_Doris struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Doris) Reset() {
	*x = Data_Doris{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Doris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Doris) ProtoMessage() {}

func (x *Data_Doris) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Doris.ProtoReflect.Descriptor instead.
func (*Data_Doris) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Data_Doris) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Data_ElasticSearch struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Addresses           []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Username            string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password            string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	EnableSniffer       bool                   `protobuf:"varint,4,opt,name=enable_sniffer,json=enableSniffer,proto3" json:"enable_sniffer,omitempty"`
	EnableGzip          bool                   `protobuf:"varint,5,opt,name=enable_gzip,json=enableGzip,proto3" json:"enable_gzip,omitempty"`
	HealthCheckInterval *durationpb.Duration   `protobuf:"bytes,6,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Data_ElasticSearch) Reset() {
	*x = Data_ElasticSearch{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_ElasticSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_ElasticSearch) ProtoMessage() {}

func (x *Data_ElasticSearch) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_ElasticSearch.ProtoReflect.Descriptor instead.
func (*Data_ElasticSearch) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Data_ElasticSearch) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Data_ElasticSearch) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_ElasticSearch) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_ElasticSearch) GetEnableSniffer() bool {
	if x != nil {
		return x.EnableSniffer
	}
	return false
}

func (x *Data_ElasticSearch) GetEnableGzip() bool {
	if x != nil {
		return x.EnableGzip
	}
	return false
}

func (x *Data_ElasticSearch) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

type Data_Cassandra struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Address                  string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Username                 string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password                 string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Keyspace                 string                 `protobuf:"bytes,5,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	ConnectTimeout           *durationpb.Duration   `protobuf:"bytes,6,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	Timeout                  *durationpb.Duration   `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Consistency              uint32                 `protobuf:"varint,8,opt,name=consistency,proto3" json:"consistency,omitempty"`
	DisableInitialHostLookup bool                   `protobuf:"varint,9,opt,name=disable_initial_host_lookup,json=disableInitialHostLookup,proto3" json:"disable_initial_host_lookup,omitempty"`
	IgnorePeerAddr           bool                   `protobuf:"varint,10,opt,name=ignore_peer_addr,json=ignorePeerAddr,proto3" json:"ignore_peer_addr,omitempty"`
	Tls                      *TLS                   `protobuf:"bytes,11,opt,name=tls,proto3" json:"tls,omitempty"` // TLS配置
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Data_Cassandra) Reset() {
	*x = Data_Cassandra{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Cassandra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Cassandra) ProtoMessage() {}

func (x *Data_Cassandra) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Cassandra.ProtoReflect.Descriptor instead.
func (*Data_Cassandra) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Data_Cassandra) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Data_Cassandra) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Data_Cassandra) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Cassandra) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Data_Cassandra) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Data_Cassandra) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Data_Cassandra) GetConsistency() uint32 {
	if x != nil {
		return x.Consistency
	}
	return 0
}

func (x *Data_Cassandra) GetDisableInitialHostLookup() bool {
	if x != nil {
		return x.DisableInitialHostLookup
	}
	return false
}

func (x *Data_Cassandra) GetIgnorePeerAddr() bool {
	if x != nil {
		return x.IgnorePeerAddr
	}
	return false
}

func (x *Data_Cassandra) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Data_Snowflake struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Snowflake) Reset() {
	*x = Data_Snowflake{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Snowflake) ProtoMessage() {}

func (x *Data_Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Snowflake.ProtoReflect.Descriptor instead.
func (*Data_Snowflake) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 8}
}

// Kafka
type Data_Kafka struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Endpoints              []string               `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`                                                              // 对端网络地址
	Codec                  string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`                                                                      // 编解码器
	Async                  bool                   `protobuf:"varint,3,opt,name=async,proto3" json:"async,omitempty"`                                                                     // 异步发送
	AllowAutoTopicCreation bool                   `protobuf:"varint,4,opt,name=allow_auto_topic_creation,json=allowAutoTopicCreation,proto3" json:"allow_auto_topic_creation,omitempty"` // 允许发送的时候自动创建主题
	BatchSize              int32                  `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                                            // 批量发送量
	BatchBytes             int64                  `protobuf:"varint,6,opt,name=batch_bytes,json=batchBytes,proto3" json:"batch_bytes,omitempty"`                                         // 批量发送字节数
	BatchTimeout           *durationpb.Duration   `protobuf:"bytes,7,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`                                    // 批量发送超时时间
	ReadTimeout            *durationpb.Duration   `protobuf:"bytes,8,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`                                       // 读取超时时间
	WriteTimeout           *durationpb.Duration   `protobuf:"bytes,9,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`                                    // 发送超时时间
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Data_Kafka) Reset() {
	*x = Data_Kafka{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Kafka) ProtoMessage() {}

func (x *Data_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Kafka.ProtoReflect.Descriptor instead.
func (*Data_Kafka) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Data_Kafka) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Data_Kafka) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Data_Kafka) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

func (x *Data_Kafka) GetAllowAutoTopicCreation() bool {
	if x != nil {
		return x.AllowAutoTopicCreation
	}
	return false
}

func (x *Data_Kafka) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *Data_Kafka) GetBatchBytes() int64 {
	if x != nil {
		return x.BatchBytes
	}
	return 0
}

func (x *Data_Kafka) GetBatchTimeout() *durationpb.Duration {
	if x != nil {
		return x.BatchTimeout
	}
	return nil
}

func (x *Data_Kafka) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Kafka) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

// RabbitMQ
type Data_RabbitMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoints     []string               `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"` // 对端网络地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_RabbitMQ) Reset() {
	*x = Data_RabbitMQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RabbitMQ) ProtoMessage() {}

func (x *Data_RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RabbitMQ.ProtoReflect.Descriptor instead.
func (*Data_RabbitMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Data_RabbitMQ) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// MQTT
type Data_Mqtt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Mqtt) Reset() {
	*x = Data_Mqtt{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Mqtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Mqtt) ProtoMessage() {}

func (x *Data_Mqtt) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Mqtt.ProtoReflect.Descriptor instead.
func (*Data_Mqtt) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Data_Mqtt) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_Mqtt) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_ActiveMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_ActiveMQ) Reset() {
	*x = Data_ActiveMQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_ActiveMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_ActiveMQ) ProtoMessage() {}

func (x *Data_ActiveMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_ActiveMQ.ProtoReflect.Descriptor instead.
func (*Data_ActiveMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Data_ActiveMQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_ActiveMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_NATS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_NATS) Reset() {
	*x = Data_NATS{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_NATS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_NATS) ProtoMessage() {}

func (x *Data_NATS) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_NATS.ProtoReflect.Descriptor instead.
func (*Data_NATS) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Data_NATS) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_NATS) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_NSQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_NSQ) Reset() {
	*x = Data_NSQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_NSQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_NSQ) ProtoMessage() {}

func (x *Data_NSQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_NSQ.ProtoReflect.Descriptor instead.
func (*Data_NSQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 14}
}

func (x *Data_NSQ) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_NSQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_Pulsar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"` // 对端网络地址
	Codec         string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`       // 编解码器: json,xml,yaml...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Pulsar) Reset() {
	*x = Data_Pulsar{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Pulsar) ProtoMessage() {}

func (x *Data_Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Pulsar.ProtoReflect.Descriptor instead.
func (*Data_Pulsar) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Data_Pulsar) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Data_Pulsar) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

type Data_RocketMQ struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Version          string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // 驱动版本：aliyun、v2、v5
	Codec            string                 `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`     // 编解码器: json,xml,yaml...
	EnableTrace      bool                   `protobuf:"varint,3,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`
	NameServers      []string               `protobuf:"bytes,4,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`
	NameServerDomain string                 `protobuf:"bytes,5,opt,name=name_server_domain,json=nameServerDomain,proto3" json:"name_server_domain,omitempty"`
	AccessKey        string                 `protobuf:"bytes,6,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey        string                 `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SecurityToken    string                 `protobuf:"bytes,8,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	Namespace        string                 `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InstanceName     string                 `protobuf:"bytes,10,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	GroupName        string                 `protobuf:"bytes,11,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Data_RocketMQ) Reset() {
	*x = Data_RocketMQ{}
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_RocketMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_RocketMQ) ProtoMessage() {}

func (x *Data_RocketMQ) ProtoReflect() protoreflect.Message {
	mi := &file_conf_v1_kratos_conf_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_RocketMQ.ProtoReflect.Descriptor instead.
func (*Data_RocketMQ) Descriptor() ([]byte, []int) {
	return file_conf_v1_kratos_conf_data_proto_rawDescGZIP(), []int{0, 16}
}

func (x *Data_RocketMQ) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Data_RocketMQ) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Data_RocketMQ) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *Data_RocketMQ) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *Data_RocketMQ) GetNameServerDomain() string {
	if x != nil {
		return x.NameServerDomain
	}
	return ""
}

func (x *Data_RocketMQ) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Data_RocketMQ) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Data_RocketMQ) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *Data_RocketMQ) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Data_RocketMQ) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *Data_RocketMQ) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

var File_conf_v1_kratos_conf_data_proto protoreflect.FileDescriptor

var file_conf_v1_kratos_conf_data_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x76, 0x31, 0x2f,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x48, 0x01, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x03, 0x52, 0x0d, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61,
	0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x73, 0x73, 0x61, 0x6e,
	0x64, 0x72, 0x61, 0x48, 0x04, 0x52, 0x09, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x05,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x66, 0x6c, 0x75, 0x78, 0x44, 0x42, 0x48, 0x06, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78,
	0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x6f, 0x72, 0x69, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x6f, 0x72, 0x69, 0x73, 0x48, 0x07, 0x52, 0x05, 0x64, 0x6f, 0x72, 0x69, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x48, 0x08, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x48, 0x09, 0x52, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74,
	0x6d, 0x71, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x71, 0x74, 0x74, 0x48, 0x0a, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x48, 0x0b, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x71, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4e, 0x41, 0x54, 0x53, 0x48, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x53, 0x51, 0x48, 0x0d, 0x52, 0x03,
	0x6e, 0x73, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x48, 0x0e, 0x52, 0x06, 0x70, 0x75, 0x6c,
	0x73, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x6d, 0x71, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x51, 0x48, 0x0f, 0x52,
	0x08, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x71, 0x88, 0x01, 0x01, 0x1a, 0xb2, 0x05, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x56, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52,
	0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x50, 0x75, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x64,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x48,
	0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0xeb, 0x02, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x64, 0x62, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a,
	0x5b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xbf, 0x06, 0x0a,
	0x0a, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c,
	0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x1a, 0x76,
	0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x44, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x21, 0x0a, 0x05, 0x44, 0x6f, 0x72, 0x69, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x0d, 0x45, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6e, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6e, 0x69, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x67, 0x7a, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x7a, 0x69, 0x70, 0x12, 0x4d, 0x0a, 0x15, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x9a, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x73,
	0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3d, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x54, 0x4c, 0x53,
	0x52, 0x03, 0x74, 0x6c, 0x73, 0x1a, 0x0b, 0x0a, 0x09, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x1a, 0x8a, 0x03, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x75, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3e, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a,
	0x28, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x04, 0x4d, 0x71, 0x74,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x1a, 0x3c, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x1a, 0x38, 0x0a, 0x04, 0x4e, 0x41, 0x54, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x1a, 0x37, 0x0a, 0x03, 0x4e,
	0x53, 0x51, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x1a, 0x3a, 0x0a, 0x06, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x1a, 0xf5, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x51, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x6f, 0x72,
	0x69, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x71,
	0x74, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x73, 0x71,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x71, 0x42, 0x85, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x42, 0x13, 0x4b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x37, 0x64, 0x6f, 0x2f, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x43, 0x6f, 0x6e, 0x66, 0xca,
	0x02, 0x04, 0x43, 0x6f, 0x6e, 0x66, 0xe2, 0x02, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x43, 0x6f, 0x6e, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_conf_v1_kratos_conf_data_proto_rawDescOnce sync.Once
	file_conf_v1_kratos_conf_data_proto_rawDescData []byte
)

func file_conf_v1_kratos_conf_data_proto_rawDescGZIP() []byte {
	file_conf_v1_kratos_conf_data_proto_rawDescOnce.Do(func() {
		file_conf_v1_kratos_conf_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conf_v1_kratos_conf_data_proto_rawDesc), len(file_conf_v1_kratos_conf_data_proto_rawDesc)))
	})
	return file_conf_v1_kratos_conf_data_proto_rawDescData
}

var file_conf_v1_kratos_conf_data_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_conf_v1_kratos_conf_data_proto_goTypes = []any{
	(*Data)(nil),                // 0: conf.Data
	(*Data_Database)(nil),       // 1: conf.Data.Database
	(*Data_Redis)(nil),          // 2: conf.Data.Redis
	(*Data_MongoDB)(nil),        // 3: conf.Data.MongoDB
	(*Data_ClickHouse)(nil),     // 4: conf.Data.ClickHouse
	(*Data_InfluxDB)(nil),       // 5: conf.Data.InfluxDB
	(*Data_Doris)(nil),          // 6: conf.Data.Doris
	(*Data_ElasticSearch)(nil),  // 7: conf.Data.ElasticSearch
	(*Data_Cassandra)(nil),      // 8: conf.Data.Cassandra
	(*Data_Snowflake)(nil),      // 9: conf.Data.Snowflake
	(*Data_Kafka)(nil),          // 10: conf.Data.Kafka
	(*Data_RabbitMQ)(nil),       // 11: conf.Data.RabbitMQ
	(*Data_Mqtt)(nil),           // 12: conf.Data.Mqtt
	(*Data_ActiveMQ)(nil),       // 13: conf.Data.ActiveMQ
	(*Data_NATS)(nil),           // 14: conf.Data.NATS
	(*Data_NSQ)(nil),            // 15: conf.Data.NSQ
	(*Data_Pulsar)(nil),         // 16: conf.Data.Pulsar
	(*Data_RocketMQ)(nil),       // 17: conf.Data.RocketMQ
	(*durationpb.Duration)(nil), // 18: google.protobuf.Duration
	(*TLS)(nil),                 // 19: conf.TLS
}
var file_conf_v1_kratos_conf_data_proto_depIdxs = []int32{
	1,  // 0: conf.Data.database:type_name -> conf.Data.Database
	2,  // 1: conf.Data.redis:type_name -> conf.Data.Redis
	3,  // 2: conf.Data.mongodb:type_name -> conf.Data.MongoDB
	7,  // 3: conf.Data.elastic_search:type_name -> conf.Data.ElasticSearch
	8,  // 4: conf.Data.cassandra:type_name -> conf.Data.Cassandra
	4,  // 5: conf.Data.clickhouse:type_name -> conf.Data.ClickHouse
	5,  // 6: conf.Data.influxdb:type_name -> conf.Data.InfluxDB
	6,  // 7: conf.Data.doris:type_name -> conf.Data.Doris
	10, // 8: conf.Data.kafka:type_name -> conf.Data.Kafka
	11, // 9: conf.Data.rabbitmq:type_name -> conf.Data.RabbitMQ
	12, // 10: conf.Data.mqtt:type_name -> conf.Data.Mqtt
	13, // 11: conf.Data.activemq:type_name -> conf.Data.ActiveMQ
	14, // 12: conf.Data.nats:type_name -> conf.Data.NATS
	15, // 13: conf.Data.nsq:type_name -> conf.Data.NSQ
	16, // 14: conf.Data.pulsar:type_name -> conf.Data.Pulsar
	17, // 15: conf.Data.rocketmq:type_name -> conf.Data.RocketMQ
	18, // 16: conf.Data.Database.connection_max_lifetime:type_name -> google.protobuf.Duration
	18, // 17: conf.Data.Redis.dial_timeout:type_name -> google.protobuf.Duration
	18, // 18: conf.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	18, // 19: conf.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	18, // 20: conf.Data.ClickHouse.dial_timeout:type_name -> google.protobuf.Duration
	18, // 21: conf.Data.ClickHouse.conn_max_life_time:type_name -> google.protobuf.Duration
	18, // 22: conf.Data.ClickHouse.connection_max_lifetime:type_name -> google.protobuf.Duration
	19, // 23: conf.Data.ClickHouse.tls:type_name -> conf.TLS
	18, // 24: conf.Data.ElasticSearch.health_check_interval:type_name -> google.protobuf.Duration
	18, // 25: conf.Data.Cassandra.connect_timeout:type_name -> google.protobuf.Duration
	18, // 26: conf.Data.Cassandra.timeout:type_name -> google.protobuf.Duration
	19, // 27: conf.Data.Cassandra.tls:type_name -> conf.TLS
	18, // 28: conf.Data.Kafka.batch_timeout:type_name -> google.protobuf.Duration
	18, // 29: conf.Data.Kafka.read_timeout:type_name -> google.protobuf.Duration
	18, // 30: conf.Data.Kafka.write_timeout:type_name -> google.protobuf.Duration
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_conf_v1_kratos_conf_data_proto_init() }
func file_conf_v1_kratos_conf_data_proto_init() {
	if File_conf_v1_kratos_conf_data_proto != nil {
		return
	}
	file_conf_v1_kratos_conf_tls_proto_init()
	file_conf_v1_kratos_conf_data_proto_msgTypes[0].OneofWrappers = []any{}
	file_conf_v1_kratos_conf_data_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conf_v1_kratos_conf_data_proto_rawDesc), len(file_conf_v1_kratos_conf_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_v1_kratos_conf_data_proto_goTypes,
		DependencyIndexes: file_conf_v1_kratos_conf_data_proto_depIdxs,
		MessageInfos:      file_conf_v1_kratos_conf_data_proto_msgTypes,
	}.Build()
	File_conf_v1_kratos_conf_data_proto = out.File
	file_conf_v1_kratos_conf_data_proto_goTypes = nil
	file_conf_v1_kratos_conf_data_proto_depIdxs = nil
}
